h1. Valuedate

| Description | Validates values using a schema. |
| Source | "http://github.com/headjump/valuedate":http://github.com/headjump/valuedate |

h2. Sample

<pre>

// chained validation
	Assure.value.isA(Number).inRange(10, 20).validate(15); // => true

// validating Object properties (with optional properties)
	var admin:Object = {
		role: "admin",
		info: {
			title: "I'm admin"
		}
	};	
	var user:Object = {
		role: "user",
	};
	var mother:Object = {
		role: "your mother",
		age: 88
	};
	var schema:Assure = Assure.value.forProperties( {
		role: 	Assure.value.equalsOneOf("admin","user"),
		info: 	Assure.optional_value.forProperties( {
			title: Assure.value.isA(String)
		})
	});
	schema.validate(admin);  // => true
	schema.validate(user);   // => true
	schema.validate(mother); // => false
</pre>

h3. Template for your own @Assure@s:

Add a function in _Assure.as_ to the @Assure@ class, following this template:

*Template*
<pre>
public function myFunction(my_params):Assure {
	return check(function(value:*) {
		// @value is the value to check your constraints for
		// 		if @value matches: 	do nothing
		// 		otherwise: 			throw an Error!
	});
}
</pre>

The @validate(...)@ function catches your errors. If there are any, it returns @false@, otherwise @true@.

*Example*
<pre>
public function isA(c:Class):Assure {
	return check(function(value:*) {
		if (!(value is c)) throw new Error("!ofClass " + [value, c]);
	});
}
</pre>